// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Multi-tenant Business/Tenant model
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  address     String?
  phone       String?
  email       String
  logo        String?
  timeInterval Int     @default(60) // Time slot interval in minutes
  
  // Business hours configuration
  businessHours String? // JSON string for flexible hours configuration
  
  // Subscription and billing (for future SaaS features)
  subscriptionStatus String @default("active") // active, suspended, cancelled
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users        User[]
  appointments Appointment[]
  services     Service[]

  @@map("tenants")
}

// Users can be admins for tenants or customers making bookings
model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String?
  phone    String?
  role     String @default("customer") // customer, admin, owner
  
  // Tenant association for admin users
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  appointments Appointment[]

  @@map("users")
}

// Services offered by a tenant
model Service {
  id       String @id @default(cuid())
  name     String
  duration Int    // Duration in minutes
  price    Float? // Optional price
  
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  appointments Appointment[]

  @@map("services")
}

// Appointments with multi-tenant support
model Appointment {
  id     String @id @default(cuid())
  
  // Customer information
  customerName  String
  customerEmail String
  customerPhone String?
  
  // Appointment details
  date DateTime
  time String   // Time in HH:MM format
  status String @default("active") // active, cancelled, completed, no_show
  notes  String?
  
  // Cancellation
  cancellationToken String  @unique @default(cuid())
  cancelledAt       DateTime?
  cancellationReason String?
  
  // Notifications
  reminderSent      Boolean @default(false)
  confirmationSent  Boolean @default(false)
  
  // Relations
  tenantId  String
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}